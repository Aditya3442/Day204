class Solution {
    public void dfs(int i , boolean[] visited , List<List<Integer>> adj) {
        visited[i] = true;
        for (int x : adj.get(i)) {
            if(!visited[x]) {
                dfs(x , visited , adj);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
         List<List<Integer>> adj = new ArrayList<>();
         for (int i = 0; i < n; i++) {
              adj.add(new ArrayList<>());
         }
         for (int i = 0; i < n; i++) {
            for (int j = 0; j < isConnected[i].length; j++) {
                if(isConnected[i][j] == 1) 
                   adj.get(i).add(j);
            }
         }
         int ans = 0;
         boolean visited[] = new boolean[n];
         for(int i = 0; i < n ; i++) {
            if(!visited[i]) {
                ans++;
                dfs(i , visited , adj);
            }
         }
         return ans;
    }
}
